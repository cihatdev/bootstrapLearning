{"version":3,"sources":["redux/actions/cartActions.js","redux/actions/actionTypes.js","components/cart/CartDetail.js","components/common/NotFound.js","components/cart/CartSummary.js","components/navi/Navi.js","redux/actions/categoryActions.js","redux/actions/productActions.js","components/toolbox/SelectInput.js","components/toolbox/TextInput.js","components/products/ProductDetail.js","components/products/AddOrUpdateProduct.js","components/categories/CategoryList.js","components/products/ProductList.js","components/root/Dashboard.js","components/root/App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/changeCategoryReducer.js","redux/reducers/categoryListReducer.js","redux/reducers/productListReducer.js","redux/reducers/cartReducer.js","redux/reducers/saveProductReducer.js","index.js","redux/reducers/configureStore.js"],"names":["addToCart","cartItem","type","payload","removeFromCart","product","CartDetail","this","props","actions","alertify","error","productName","Badge","color","Table","cart","map","key","id","scope","unitPrice","quantity","Button","onClick","length","renderCartDetail","renderEmpty","Component","connect","state","cartReducer","dispatch","bindActionCreators","cartActions","NotFound","CartSummary","NavItem","NavLink","href","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","productId","divider","to","renderSummary","Navi","useState","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","className","NavbarText","changeCategory","category","getCategories","fetch","then","response","json","result","handlerResponse","a","ok","text","Error","handlerError","console","log","getProducts","categoryId","url","SelecetInput","name","label","onChange","defaultOptions","value","options","htmlFom","option","TextIput","placeHolder","wrapperClass","placeholder","ProductDetail","categories","onSave","errors","onSubmit","TextInput","categoryName","quantityPerUnit","unitsInStock","unitInStock","mapDispatchToProps","saveProduct","method","headers","body","JSON","stringify","catch","saveProductApi","updateProductSuccess","createProductSuccess","ownProps","match","params","productListReducer","products","find","getProductById","categoryListReducer","history","setProduct","setErrors","useEffect","event","target","previousProduct","parseInt","previousErrors","validate","preventDefault","push","CategoryList","selectcategory","ListGroup","ListGroupItem","active","currentCategory","changeCategoryReducer","categoryActions","productActions","ProductList","success","Dashboard","Row","Col","xs","App","Container","path","exact","component","AddOrUpdateProduct","Boolean","window","location","hostname","rootReducer","combineReducers","initialState","action","addedItem","c","newState","Object","assign","newState2","filter","saveProductReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ddf35b71.chunk.js","sourcesContent":["import * as actionTypes from \"./actionTypes\"\r\n\r\nexport function addToCart(cartItem) {\r\n  return { type: actionTypes.ADD_TO_CART, payload: cartItem }\r\n}\r\n\r\nexport function removeFromCart(product) {\r\n  return { type: actionTypes.REMOVE_FROM_CART, payload: product }\r\n}  ","export const CHANGE_CATEGORY = \"CHANGE_CATEGORY\"\r\nexport const GET_CATEGORIES_SUCCESS = \"GET_CATEGORIES_SUCCESS\"\r\n\r\nexport const GET_PRODUCTS_SUCCESS = \"GET_PRODUCTS_SUCCESS\"\r\nexport const CREATE_PRODUCT_SUCCESS = \"CREATE_PRODUCT_SUCCESS\"\r\nexport const UPDATE_PRODUCT_SUCCESS = \"UPDATE_PRODUCT_SUCCESS\"\r\n\r\n\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\n\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//1. actiontypes.js ekleme\r\n//2. action ekleme\r\n//3. reducer'a ekleme\r\n//4. reducers'ın içindeki index.js ekleme","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Badge, Button, Table } from 'reactstrap'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as  cartActions from '../../redux/actions/cartActions'\r\nimport alertify from \"alertifyjs\"\r\n\r\n\r\nclass CartDetail extends Component {\r\n  removeFromCart(product) {\r\n    this.props.actions.removeFromCart(product)\r\n    alertify.error(product.productName + \"  Sepetten Silindi 🧨🧨...\")\r\n  }\r\n  renderEmpty() {\r\n    return (\r\n      <div>\r\n        <h1>\r\n          <Badge color=\"danger\">\r\n            Sepetiniz Boş\r\n          </Badge>\r\n        </h1>\r\n      </div>\r\n    )\r\n  }\r\n  renderCartDetail() {\r\n    return (\r\n      <div>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Ürün Adı</th>\r\n              <th>Ürün Fiyatı</th>\r\n              <th>Miktar</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.cart.map(cartItem => (\r\n              <tr key={cartItem.product.id}>\r\n                <th scope=\"row\">{cartItem.product.id}</th>\r\n                <td>{cartItem.product.productName}</td>\r\n                <td>{cartItem.product.unitPrice}</td>\r\n                <td>{cartItem.quantity}</td>\r\n                <td>\r\n                  <Button color=\"danger\" onClick={() => this.removeFromCart(cartItem.product)}>\r\n                    Sil\r\n                </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {\r\n          this.props.cart.length > 0 ? this.renderCartDetail() : this.renderEmpty()\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//bir action kullanmak için\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      removeFromCart: bindActionCreators(cartActions.removeFromCart, dispatch),\r\n    }\r\n  }\r\n}\r\n\r\n//state bağlanmak için\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    cart: state.cartReducer\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartDetail);","import React, { Component } from 'react'\r\n\r\nexport default class NotFound extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Sayfa Bulunamadı</h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavLink,\r\n  NavItem,\r\n  Badge,\r\n  Button,\r\n} from 'reactstrap';\r\nimport { bindActionCreators } from 'redux'\r\nimport * as  cartActions from '../../redux/actions/cartActions'\r\nimport { Link } from \"react-router-dom\"\r\nimport alertify from 'alertifyjs';\r\n\r\nclass CartSummary extends Component {\r\n  removeFromCart(product) {\r\n    this.props.actions.removeFromCart(product)\r\n    alertify.error(product.productName + \"  Sepetten Silindi 🧨🧨...\")\r\n  }\r\n  renderEmpty() {\r\n    return (\r\n      <NavItem>\r\n        <NavLink href=\"/cart\"><Button color=\"danger\">Sepetiniz Boş</Button></NavLink>\r\n      </NavItem>\r\n    )\r\n  }\r\n\r\n  renderSummary() {\r\n    return (\r\n      <UncontrolledDropdown nav inNavbar>\r\n        <DropdownToggle nav caret>\r\n          <Button color=\"success\">\r\n            Sepetiniz\r\n          </Button>\r\n        </DropdownToggle>\r\n        <DropdownMenu right>\r\n          {\r\n            this.props.cart.map(cartItem => (\r\n              <DropdownItem key={cartItem.productId}>\r\n                <Badge color=\"danger\" onClick={() => this.removeFromCart(cartItem.product)}\r\n                >X</Badge>\r\n                <Badge color=\"warning\">\r\n                  {cartItem.product.productName}\r\n                </Badge>\r\n                <Badge color=\"success\">{cartItem.quantity}</Badge>\r\n              </DropdownItem>\r\n            ))\r\n          }\r\n          <DropdownItem divider />\r\n          <DropdownItem>\r\n            <Link to=\"/cart\">\r\n              <Badge color=\"info\">\r\n                Sepete Git\r\n              </Badge>\r\n            </Link>\r\n          </DropdownItem>\r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {\r\n          this.props.cart.length > 0 ? this.renderSummary() : this.renderEmpty()\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//bir action kullanmak için\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      removeFromCart: bindActionCreators(cartActions.removeFromCart, dispatch),\r\n    }\r\n  }\r\n}\r\n\r\n//state bağlanmak için\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    cart: state.cartReducer\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartSummary);","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  NavbarText,\r\n  Button,\r\n  Badge\r\n} from 'reactstrap';\r\nimport CartSummary from '../cart/CartSummary';\r\n\r\nconst Navi = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand ><Link to=\"/\"><h4>Northwind Project</h4></Link></NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/\"> <Button color=\"success\">Ana Menü</Button></NavLink>\r\n            </NavItem>\r\n            <CartSummary />\r\n          </Nav>\r\n          <NavbarText><Button color=\"success\">\r\n            <Link to=\"/saveproduct\">Ürün Ekle</Link>\r\n          </Button>\r\n          </NavbarText>\r\n        </Collapse>\r\n      </Navbar >\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Navi;","import * as actiontypes from \"./actionTypes\"\r\n\r\nexport function changeCategory(category) {\r\n  return { type: actiontypes.CHANGE_CATEGORY, payload: category }\r\n}\r\n\r\nexport function getCategoriesSuccess(categories) {\r\n  return { type: actiontypes.GET_CATEGORIES_SUCCESS, payload: categories }\r\n}\r\n\r\nexport function getCategories() {\r\n  return function (dispatch) {\r\n    let url = \"http://localhost:3000/categories\"\r\n    return fetch(url)\r\n      .then(response => response.json())\r\n      .then(result => dispatch(getCategoriesSuccess(result)))\r\n\r\n  }\r\n}","import * as actionTypes from \"./actionTypes\"\r\n\r\nexport function getProductsSuccess(products) {\r\n  return { type: actionTypes.GET_PRODUCTS_SUCCESS, payload: products }\r\n}\r\n\r\nexport function createProductSuccess(product) {\r\n  return { type: actionTypes.CREATE_PRODUCT_SUCCESS, payload: product }\r\n}\r\n\r\nexport function updateProductSuccess(product) {\r\n  return { type: actionTypes.UPDATE_PRODUCT_SUCCESS, payload: product }\r\n}\r\n\r\nexport function saveProductApi(product) {\r\n  return fetch(\"http://localhost3000/products/\" + (product.id || \"\"), {\r\n    method: product.id ? \"PUT\" : \"POST\",\r\n    headers: { \"content-type\": \"application/json\" },\r\n    body: JSON.stringify(product)\r\n  }).then(handlerResponse)\r\n    .catch(handlerError);\r\n}\r\n\r\nexport function saveProduct(product) {\r\n  return function (dispatch) {\r\n    return saveProductApi(product).then(saveProduct => {\r\n      product.id\r\n        ? dispatch(updateProductSuccess(saveProduct))\r\n        : dispatch(createProductSuccess(saveProduct))\r\n    }).catch(error => { throw error })\r\n  }\r\n}\r\n\r\nexport async function handlerResponse(response) {\r\n  if (response.ok) {\r\n    return response.json();\r\n  }\r\n\r\n  const error = await response.text()\r\n  throw new Error(error)\r\n}\r\n\r\nexport function handlerError(error) {\r\n  console.log(\"Bir hata oluştu...\");\r\n  throw error;\r\n}\r\n\r\n\r\nexport function getProducts(categoryId) {\r\n  return function (dispatch) {\r\n    let url = \"http://localhost:3000/products\"\r\n    if (categoryId) {\r\n      url = url + \"?categoryId=\" + categoryId\r\n    }\r\n    return fetch(url)\r\n      .then(response => response.json())\r\n      .then(result => dispatch(getProductsSuccess(result)));\r\n  };\r\n}","import React from \"react\";\r\n\r\n\r\nconst SelecetInput = ({ name,\r\n  label,\r\n  onChange,\r\n  defaultOptions,\r\n  value,\r\n  error,\r\n  options }) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFom={name}>\r\n        {label}\r\n      </label>\r\n      <select\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        className=\"form-control\">\r\n        <option value=\"\">\r\n          {defaultOptions}\r\n        </option>\r\n        {options.map(option => {\r\n          return (\r\n            <option key={option.value} value={option.value}>\r\n              {option.text}\r\n            </option>\r\n          )\r\n        })}\r\n      </select>\r\n      {error && <div className=\"alert alert-danger\">{error}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SelecetInput","import React from \"react\"\r\n\r\nconst TextIput = ({ name, label, onChange, placeHolder, value, error }) => {\r\n  let wrapperClass = \"form-group\"\r\n  if (error && error.length > 0) {\r\n    wrapperClass += \" has-error\"\r\n  }\r\n\r\n  return (\r\n    <div className={wrapperClass}>\r\n      <label htmlFom={name}>\r\n        {label}\r\n      </label>\r\n      <div className=\"field\">\r\n        <input type=\"text\"\r\n          name={name}\r\n          className=\"form-control\"\r\n          placeholder={placeHolder}\r\n          value={value}\r\n          onChange={onChange}\r\n        />\r\n        {error && <div className=\"alert alert-danger\">{error}</div>}\r\n      </div>\r\n    </div >\r\n  )\r\n};\r\n\r\n\r\nexport default TextIput;","import React from \"react\"\r\nimport SelecetInput from \"../toolbox/SelectInput\";\r\nimport TextInput from \"../toolbox/TextInput\"\r\n\r\nconst ProductDetail = (\r\n  { categories,\r\n    product,\r\n    onSave,\r\n    onChange,\r\n    errors }\r\n) => {\r\n  return (\r\n    <form onSubmit={onSave}>\r\n      <h2>{product.id ? \"Güncelle\" : \"Ekle\"}</h2>\r\n      <TextInput\r\n        name=\"productName\"\r\n        label=\"Product Name\"\r\n        value={product.productName}\r\n        onChange={onChange}\r\n        error={errors.productName}\r\n      />\r\n\r\n      <SelecetInput\r\n        name=\"categoryId\"\r\n        className=\"Category\"\r\n        label=\"Kategori\"\r\n        value={product.categoryId || \"\"}\r\n        defaultOptions=\"Seçininz\"\r\n        options={categories.map(category => ({\r\n          value: category.id,\r\n          text: category.categoryName\r\n        }))}\r\n        onChange={onChange}\r\n        error={errors.categoryId}\r\n      />\r\n\r\n      <TextInput\r\n        name=\"unitPrice\"\r\n        label=\"Fiyat\"\r\n        value={product.unitPrice}\r\n        onChange={onChange}\r\n        error={errors.unitPrice}\r\n      />\r\n\r\n      <TextInput\r\n        name=\"quantityPerUnit\"\r\n        label=\"Birim Adeti\"\r\n        value={product.quantityPerUnit}\r\n        onChange={onChange}\r\n        error={errors.quantityPerUnit}\r\n      />\r\n\r\n      <TextInput\r\n        name=\"unitsInStock\"\r\n        label=\"Stoktaki Birim Adeti\"\r\n        value={product.unitsInStock}\r\n        onChange={onChange}\r\n        error={errors.unitInStock}\r\n      />\r\n\r\n      <button type=\"submit\" className=\"btn btn-success\">\r\n        Kaydet\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default ProductDetail;","import React, { useEffect, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { getCategories } from \"../../redux/actions/categoryActions\"\r\nimport { saveProduct } from \"../../redux/actions/productActions\"\r\nimport ProductDetail from \"./ProductDetail\"\r\n\r\nfunction AppOrUpdateProduct({\r\n  products,\r\n  categories,\r\n  getProducts,\r\n  getCategories,\r\n  saveProduct,\r\n  history,\r\n  ...props\r\n}) {\r\n  const [product, setProduct] = useState({ ...props.product })\r\n  const [errors, setErrors] = useState({});\r\n  useEffect(() => {\r\n    if (categories.length === 0) {\r\n      getCategories();\r\n    }\r\n    setProduct({ ...props.product });\r\n  }, [props.product]);\r\n\r\n  function handleChange(event) {\r\n    const { name, value } = event.target;\r\n    setProduct(previousProduct => ({\r\n      ...previousProduct,\r\n      [name]: name === \"categoryId\" ? parseInt(value, 10) : value\r\n    }));\r\n    validate(name, value)\r\n  }\r\n\r\n  function validate(name, value) {\r\n    if (name == \"productName\" && value === \"\") {\r\n      setErrors(previousErrors => ({ ...previousErrors, productName: \"Ürün Ismi Olmalıdır.\" }))\r\n    }\r\n    else {\r\n      setErrors(previousErrors => ({ ...previousErrors, productName: \"\" }))\r\n    }\r\n  }\r\n\r\n  function handleSave(event) {\r\n    event.preventDefault();\r\n    saveProduct(product).then(() => {\r\n      history.push(\"/\");\r\n    });\r\n  }\r\n\r\n  return (\r\n    <ProductDetail\r\n      product={product}\r\n      categories={categories}\r\n      onChange={handleChange}\r\n      onSave={handleSave}\r\n      errors={errors}\r\n    />\r\n\r\n  )\r\n}\r\n\r\nexport function getProductById(products, productId) {\r\n  let product = products.find(product => product.id == productId) || null;\r\n  return product;\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  const productId = ownProps.match.params.productId\r\n  const product = productId && state.productListReducer.length > 0\r\n    ? getProductById(state.productListReducer, productId)\r\n    : {};\r\n  return {\r\n    product,\r\n    products: state.productListReducer,\r\n    categories: state.categoryListReducer\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getCategories, saveProduct\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppOrUpdateProduct)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Badge, Button, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport { bindActionCreators } from \"redux\"\r\nimport * as categoryActions from \"../../redux/actions/categoryActions\"\r\nimport * as  productActions from '../../redux/actions/productActions'\r\n\r\n\r\nclass CategoryList extends Component {\r\n  componentDidMount() {\r\n    this.props.actions.getCategories()\r\n  }\r\n\r\n  selectcategory = category => {\r\n    this.props.actions.changeCategory(category)\r\n    this.props.actions.getProducts(category.id)\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <Badge color=\"primary\">Kategoriler</Badge>\r\n        </h3>\r\n        <ListGroup>\r\n          {\r\n            this.props.categories.map(category => (\r\n              <ListGroupItem\r\n                active={category.id === this.props.currentCategory.id}\r\n                onClick={() => this.selectcategory(category)}\r\n                key={category.id}>\r\n                <Button color=\"success\">\r\n                  {category.categoryName}\r\n                </Button>\r\n              </ListGroupItem>\r\n            ))\r\n          }\r\n        </ListGroup>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currentCategory: state.changeCategoryReducer,\r\n    categories: state.categoryListReducer\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      getCategories: bindActionCreators(categoryActions.getCategories, dispatch),\r\n      changeCategory: bindActionCreators(categoryActions.changeCategory, dispatch),\r\n      getProducts: bindActionCreators(productActions.getProducts, dispatch)\r\n\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryList)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Badge, Button, Table } from 'reactstrap'\r\nimport { bindActionCreators } from 'redux'\r\nimport * as  productActions from '../../redux/actions/productActions'\r\nimport * as  cartActions from '../../redux/actions/cartActions'\r\nimport alertify from \"alertifyjs\"\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nclass ProductList extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.actions.getProducts();\r\n  }\r\n\r\n  addToCart = (product) => {\r\n    this.props.actions.addToCart({ quantity: 1, product })\r\n    alertify.success(product.productName + \"  Sepete Eklendi 🎈🎉✨🎇...\")\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Badge color=\"warning\">Ürünler</Badge>\r\n        <Badge color=\"success\">{this.props.currentCategory.categoryName}</Badge>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Ürün Adı</th>\r\n              <th>Ürün Fiyatı</th>\r\n              <th>Birim Adedi</th>\r\n              <th>Stoktaki Birim Adedi</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.products.map(product => (\r\n              <tr key={product.id}>\r\n                <th scope=\"row\">{product.id}</th>\r\n                <td><Link to={\"/saveproduct/\" + product.id}>{product.productName}</Link> </td>\r\n                <td>{product.unitPrice}</td>\r\n                <td>{product.quantityPerUnit}</td>\r\n                <td>{product.unitsInStock}</td>\r\n                <td>\r\n                  <Button color=\"success\" onClick={() => this.addToCart(product)}>\r\n                    Ekle\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currentCategory: state.changeCategoryReducer,\r\n    products: state.productListReducer\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      getProducts: bindActionCreators(productActions.getProducts, dispatch),\r\n      addToCart: bindActionCreators(cartActions.addToCart, dispatch),\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList)\r\n","import React, { Component } from 'react'\r\nimport { Col, Row } from 'reactstrap'\r\nimport CategoryList from '../categories/CategoryList'\r\nimport ProductList from '../products/ProductList'\r\n\r\nexport default class Dashboard extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col xs=\"3\">\r\n            <CategoryList />\r\n          </Col>\r\n          <Col xs=\"9\">\r\n            <ProductList />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Container } from 'reactstrap';\nimport CartDetail from '../cart/CartDetail';\nimport NotFound from '../common/NotFound';\nimport Navi from '../navi/Navi';\nimport AddOrUpdateProduct from '../products/AddOrUpdateProduct';\nimport Dashboard from './Dashboard';\n\nfunction App() {\n  return (\n    <Container>\n      <Navi />\n      <Switch>\n        <Route path=\"cihatdev.github.io/fronEnd-Dev/\" exact component={Dashboard} />\n        <Route path=\"cihatdev.github.io/fronEnd-Dev/product\" component={Dashboard} />\n        <Route path=\"cihatdev.github.io/fronEnd-Dev/cart\" component={CartDetail} />\n        <Route path=\"cihatdev.github.io/fronEnd-Dev/saveproduct/:productId\" component={AddOrUpdateProduct} />\n        <Route path=\"cihatdev.github.io/fronEnd-Dev/saveproduct\" component={AddOrUpdateProduct} />\n        <Route component={NotFound} />\n      </Switch>\n    </Container>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\r\n  currentCategory: {},\r\n  categories: [],\r\n  products: [],\r\n  cart: [],\r\n  saveProduct: []\r\n}","import { combineReducers } from 'redux'\r\nimport changeCategoryReducer from \"./changeCategoryReducer\"\r\nimport categoryListReducer from \"./categoryListReducer\"\r\nimport productListReducer from \"./productListReducer\"\r\nimport cartReducer from \"./cartReducer\"\r\nimport saveProductReducer from \"./saveProductReducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n  changeCategoryReducer,\r\n  categoryListReducer,\r\n  productListReducer,\r\n  cartReducer,\r\n  saveProductReducer,\r\n\r\n})\r\n\r\nexport default rootReducer;","import * as actionTypes from \"../actions/actionTypes\"\r\nimport initialState from \"./initialState\";\r\n\r\nexport default function changeCategoryReducer(state = initialState.currentCategory, action) {\r\n  switch (action.type) {\r\n    case actionTypes.CHANGE_CATEGORY:\r\n      return action.payload\r\n    default:\r\n      return state;\r\n  }\r\n}","import * as actionTypes from \"../actions/actionTypes\"\r\nimport initialState from \"./initialState\";\r\n\r\nexport default function changeCategoryReducer(state = initialState.categories, action) {\r\n  switch (action.type) {\r\n    case actionTypes.GET_CATEGORIES_SUCCESS:\r\n      return action.payload\r\n    default:\r\n      return state;\r\n  }\r\n}","import * as actionTypes from \"../actions/actionTypes\"\r\nimport initialState from \"./initialState\";\r\n\r\nexport default function productListReducer(state = initialState.products, action) {\r\n  switch (action.type) {\r\n    case actionTypes.GET_PRODUCTS_SUCCESS:\r\n      return action.payload\r\n    default:\r\n      return state;\r\n  }\r\n}","import * as actionTypes from \"../actions/actionTypes\"\r\nimport initialState from \"./initialState\"\r\n\r\nexport default function cartReducer(state = initialState.cart, action) {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_TO_CART:\r\n      let addedItem = state.find(c => c.product.id === action.payload.product.id);\r\n      if (addedItem) {\r\n        let newState = state.map(cartItem => {\r\n          if (cartItem.product.id === action.payload.product.id) {\r\n            return Object.assign({}, addedItem, { quantity: addedItem.quantity + 1 })\r\n          }\r\n          return cartItem;\r\n        })\r\n        return newState;\r\n      }\r\n      else {\r\n        return [...state, { ...action.payload }]\r\n      }\r\n    case actionTypes.REMOVE_FROM_CART:\r\n      const newState2 = state.filter(cartItem => cartItem.product.id !== action.payload.id)\r\n      return newState2;\r\n    default:\r\n      return state;\r\n  }\r\n}","import * as actionTypes from \"../actions/actionTypes\"\r\nimport initialState from \"./initialState\";\r\n\r\nexport default function saveProductReducer(state = initialState.saveProduct, action) {\r\n  switch (action.type) {\r\n    case actionTypes.UPDATE_PRODUCT_SUCCESS:\r\n      return action.payload\r\n    case actionTypes.CREATE_PRODUCT_SUCCESS:\r\n      return action.payload\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/root/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport configureStore from \"./redux/reducers/configureStore\"\nimport 'alertifyjs/build/css/alertify.min.css'\nimport { BrowserRouter } from \"react-router-dom\"\n\nconst store = configureStore();\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, createStore } from \"redux\"\r\nimport rootReducer from \"./index\"\r\nimport thunk from \"redux-thunk\"\r\n\r\nexport default function configureStore() {\r\n  return createStore(rootReducer, applyMiddleware(thunk))\r\n}"],"sourceRoot":""}